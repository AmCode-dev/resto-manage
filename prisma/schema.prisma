generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dueno {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre       String        @db.VarChar(255)
  apellido     String        @db.VarChar(255)
  email        String        @unique @db.VarChar(255)
  telefono     String?       @db.VarChar(20)
  dni          String?       @db.VarChar(20)
  created_at   DateTime      @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at   DateTime      @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  restaurantes Restaurante[]
  Usuario      Usuario[]

  @@index([email], map: "idx_duenos_email")
  @@map("duenos")
}

model Restaurante {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre               String             @db.VarChar(255)
  descripcion          String?
  logo_url             String?
  cuit                 String             @unique @db.VarChar(13)
  razon_social         String             @db.VarChar(255)
  condicion_fiscal     String?            @default("Responsable Inscripto") @db.VarChar(50)
  direccion            String             @db.VarChar(255)
  ciudad               String             @db.VarChar(100)
  provincia            String             @db.VarChar(100)
  codigo_postal        String?            @db.VarChar(10)
  pais                 String?            @default("Argentina") @db.VarChar(100)
  latitud              Decimal?           @db.Decimal(10, 8)
  longitud             Decimal?           @db.Decimal(11, 8)
  capacidad_total      Int?               @default(50)
  numero_mesas         Int?               @default(10)
  horario_apertura     DateTime?          @db.Time(6)
  horario_cierre       DateTime?          @db.Time(6)
  dias_operacion       String[]           @default(["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"])
  moneda               String?            @default("ARS") @db.VarChar(10)
  zona_horaria         String?            @default("America/Argentina/Buenos_Aires") @db.VarChar(50)
  idioma               String?            @default("es") @db.VarChar(10)
  telefono_restaurante String?            @db.VarChar(20)
  email_restaurante    String?            @db.VarChar(255)
  sitio_web            String?            @db.VarChar(255)
  redes_sociales       Json?              @default("{}")
  activo               Boolean?           @default(true)
  fecha_apertura       DateTime?          @db.Date
  created_at           DateTime           @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at           DateTime           @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  cajas                Caja[]
  empleados            Empleado[]
  inventario_bebidas   InventarioBebida[]
  inventario_comidas   InventarioComida[]
  menus                Menu[]
  pedidos              Pedido[]
  transacciones        Transaccion[]
  dueno                Dueno[]
  Usuario              Usuario[]

  @@index([activo], map: "idx_restaurantes_activo")
  @@index([cuit], map: "idx_restaurantes_cuit")
  @@map("restaurantes")
}

model Usuario {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String       @unique @db.VarChar(255)
  password       String       @db.VarChar(255)
  nombre         String?      @db.VarChar(255)
  apellido       String?      @db.VarChar(255)
  telefono       String?      @db.VarChar(20)
  activo         Boolean?     @default(true)
  created_at     DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  // Relación con Dueno para reconocer al dueño asociado al usuario
  dueno_id       String?      @db.Uuid
  dueno          Dueno?       @relation(fields: [dueno_id], references: [id])
  // Relación con Restaurante para reconocer el restaurante asociado al usuario
  restaurante_id String?      @db.Uuid
  restaurante    Restaurante? @relation(fields: [restaurante_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([email], map: "idx_usuarios_email")
  @@map("usuarios")
}

model Empleado {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre   String  @db.VarChar(255)
  cargo    String  @db.VarChar(100)
  contacto String  @db.VarChar(255)
  estado   String? @default("Activo") @db.VarChar(20)
  horario  String?

  restaurant_id String? @db.Uuid

  created_at         DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?         @default(now()) @updatedAt @db.Timestamptz(6)
  restaurante_id     String?           @db.Uuid
  email              String?           @db.VarChar(255)
  es_admin_principal Boolean?          @default(false)
  cajas              Caja[]
  restaurante        Restaurante?      @relation(fields: [restaurante_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  permisos           PermisoEmpleado[]

  @@index([email], map: "idx_empleados_email")
  @@index([es_admin_principal], map: "idx_empleados_es_admin_principal")
  @@index([estado], map: "idx_empleados_estado")
  @@index([restaurant_id], map: "idx_empleados_restaurant_id")
  @@index([restaurante_id], map: "idx_empleados_restaurante_id")
  @@map("empleados")
}

model SeccionSistema {
  id          String            @id @db.VarChar(50)
  nombre      String            @db.VarChar(255)
  descripcion String?
  icono       String?           @db.VarChar(100)
  created_at  DateTime?         @default(now()) @db.Timestamptz(6)
  activa      Boolean?          @default(true)
  permisos    PermisoEmpleado[]

  @@map("secciones_sistema")
}

model PermisoEmpleado {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  empleado_id String?         @db.Uuid
  seccion_id  String?         @db.VarChar(50)
  ver         Boolean?        @default(false)
  editar      Boolean?        @default(false)
  created_at  DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  empleado    Empleado?       @relation(fields: [empleado_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  seccion     SeccionSistema? @relation(fields: [seccion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([empleado_id, seccion_id])
  @@index([empleado_id], map: "idx_permisos_empleado_id")
  @@index([seccion_id], map: "idx_permisos_seccion_id")
  @@map("permisos_empleados")
}

model Menu {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurante_id String      @db.Uuid
  titulo         String      @db.VarChar(255)
  descripcion    String?
  ingredientes   String?
  precio         Decimal     @db.Decimal(10, 2)
  categoria      String      @db.VarChar(100)
  stock          Int?        @default(0)
  imagen_url     String?
  disponible     Boolean?    @default(true)
  orden_menu     Int?        @default(0)
  created_at     DateTime    @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at     DateTime    @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  restaurante    Restaurante @relation(fields: [restaurante_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([categoria], map: "idx_menus_categoria")
  @@index([disponible], map: "idx_menus_disponible")
  @@index([orden_menu], map: "idx_menus_orden")
  @@index([restaurante_id], map: "idx_menus_restaurante_id")
  @@map("menus")
}

model InventarioComida {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurante_id  String      @db.Uuid
  nombre          String      @db.VarChar(255)
  categoria       String      @db.VarChar(100)
  stock           Decimal     @default(0) @db.Decimal(10, 2)
  unidad          String      @db.VarChar(50)
  precio_unidad   Decimal     @db.Decimal(10, 2)
  fecha_caducidad DateTime?   @db.Date
  estado          String      @default("normal") @db.VarChar(20)
  codigo_barras   String?     @db.VarChar(100)
  alerta_stock    Decimal?    @default(5) @db.Decimal(10, 2)
  proveedor       String?     @db.VarChar(255)
  descripcion     String?
  ubicacion       String?     @db.VarChar(255)
  created_at      DateTime    @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at      DateTime    @default(dbgenerated("timezone('utc'::text, now())")) @updatedAt @db.Timestamptz(6)
  restaurante     Restaurante @relation(fields: [restaurante_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([categoria], map: "idx_inventario_comidas_categoria")
  @@index([estado], map: "idx_inventario_comidas_estado")
  @@index([fecha_caducidad], map: "idx_inventario_comidas_fecha_caducidad")
  @@index([restaurante_id], map: "idx_inventario_comidas_restaurante_id")
  @@map("inventario_comidas")
}

model InventarioBebida {
  id                    String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurante_id        String      @db.Uuid
  nombre                String      @db.VarChar(255)
  categoria             String      @db.VarChar(100)
  stock                 Int         @default(0)
  unidad                String      @db.VarChar(50)
  precio_unidad         Decimal     @db.Decimal(10, 2)
  fecha_caducidad       DateTime?   @db.Date
  estado                String      @default("normal") @db.VarChar(20)
  codigo_barras         String?     @db.VarChar(100)
  alerta_stock          Int?        @default(5)
  proveedor             String?     @db.VarChar(255)
  descripcion           String?
  graduacion_alcoholica Decimal?    @db.Decimal(4, 2)
  volumen               Int?
  ubicacion             String?     @db.VarChar(100)
  created_at            DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?   @default(now()) @updatedAt @db.Timestamptz(6)
  restaurante           Restaurante @relation(fields: [restaurante_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([categoria], map: "idx_inventario_bebidas_categoria")
  @@index([estado], map: "idx_inventario_bebidas_estado")
  @@index([restaurante_id], map: "idx_inventario_bebidas_restaurante")
  @@map("inventario_bebidas")
}

model Pedido {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurante_id String        @db.Uuid
  caja_id        String        @db.Uuid
  numero_pedido  Int
  mesa           Int
  personas       Int?          @default(1)
  items          Json
  subtotal       Decimal       @db.Decimal(10, 2)
  descuentos     Decimal?      @default(0) @db.Decimal(10, 2)
  impuestos      Decimal?      @default(0) @db.Decimal(10, 2)
  total          Decimal       @db.Decimal(10, 2)
  estado         String?       @default("abierto") @db.VarChar(20)
  fecha          DateTime      @default(dbgenerated("CURRENT_DATE")) @db.Date
  hora           DateTime      @default(dbgenerated("CURRENT_TIME")) @db.Time(6)
  notas          String?
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?     @default(now()) @updatedAt @db.Timestamptz(6)
  cajas          Caja          @relation(fields: [caja_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurante    Restaurante   @relation(fields: [restaurante_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transacciones  Transaccion[]

  @@index([caja_id], map: "idx_pedidos_caja")
  @@index([numero_pedido, fecha], map: "idx_pedidos_numero")
  @@index([restaurante_id, fecha], map: "idx_pedidos_restaurante_fecha")
  @@map("pedidos")
}

model Caja {
  id                String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurante_id    String        @db.Uuid
  empleado_id       String        @db.Uuid
  fecha_apertura    DateTime      @default(dbgenerated("CURRENT_DATE")) @db.Date
  hora_apertura     DateTime      @default(dbgenerated("CURRENT_TIME")) @db.Time(6)
  caja_inicial      Decimal       @default(0) @db.Decimal(10, 2)
  fecha_cierre      DateTime?     @db.Date
  hora_cierre       DateTime?     @db.Time(6)
  caja_final        Decimal?      @db.Decimal(10, 2)
  efectivo_esperado Decimal?      @default(0) @db.Decimal(10, 2)
  tarjeta_esperado  Decimal?      @default(0) @db.Decimal(10, 2)
  otros_esperado    Decimal?      @default(0) @db.Decimal(10, 2)
  efectivo_real     Decimal?      @db.Decimal(10, 2)
  tarjeta_real      Decimal?      @db.Decimal(10, 2)
  otros_real        Decimal?      @db.Decimal(10, 2)
  diferencia        Decimal?      @db.Decimal(10, 2)
  total_ventas      Decimal?      @default(0) @db.Decimal(10, 2)
  total_pedidos     Int?          @default(0)
  total_personas    Int?          @default(0)
  estado            String?       @default("abierto") @db.VarChar(20)
  notas             String?
  created_at        DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?     @default(now()) @updatedAt @db.Timestamptz(6)
  empleados         Empleado      @relation(fields: [empleado_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurante       Restaurante   @relation(fields: [restaurante_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pedidos           Pedido[]
  transacciones     Transaccion[]

  @@index([empleado_id], map: "idx_cajas_empleado")
  @@index([fecha_apertura], map: "idx_cajas_fecha")
  @@index([restaurante_id, estado], map: "idx_cajas_restaurante_estado")
  @@map("cajas")
}

model Transaccion {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurante_id String      @db.Uuid
  pedido_id      String      @db.Uuid
  caja_id        String      @db.Uuid
  metodo_pago    String      @db.VarChar(20)
  monto          Decimal     @db.Decimal(10, 2)
  referencia     String?     @db.VarChar(100)
  notas          String?
  fecha          DateTime    @default(dbgenerated("CURRENT_DATE")) @db.Date
  hora           DateTime    @default(dbgenerated("CURRENT_TIME")) @db.Time(6)
  created_at     DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?   @default(now()) @updatedAt @db.Timestamptz(6)
  caja           Caja        @relation(fields: [caja_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pedidos        Pedido      @relation(fields: [pedido_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurante    Restaurante @relation(fields: [restaurante_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([caja_id], map: "idx_transacciones_caja")
  @@index([metodo_pago], map: "idx_transacciones_metodo")
  @@index([pedido_id], map: "idx_transacciones_pedido")
  @@map("transacciones")
}
